1.props
	使用场景:一般在父子组件之间通信会考虑使用
	父传子:父组件中,给子组件的标签上添加标签属性,子组件声明props进行接收
	子传父:
		父组件现在自身的methods中定义接收数据的函数,并将该函数传递给子组件
		子组件调用父组件传下来的方法,并传入实参
		父组件将接收到的实参保存或者使用

2.provide/inject
	使用场景:祖孙组件之间通信考虑使用
	祖先组件:祖先组件在配置对象中,创建属性provide,给他提供一个对象,该对象内的属性可以被后代组件获取到
	后代组件:后代组件在配置对象中,创建属性inject,写法与props数组版本相同,只需要声明自己想获取的属性名即可

3.自定义事件
	v-model实现
		对input标签使用
			1.将data中的某个响应式属性的值作为input框的默认值value
				<input type="text" :value="form.name">
			2.当input框内容发生变化时,会修改对应的响应书属性的值
				事件名:input(默认)
				<input type="text"  @input="(event)=>{form.name = event.target.value}">
		对组件使用
			1.将data中的某个响应式属性的值作为组件的标签属性传递下来,属性名是value
				<input type="text" :value="form.name">
			2.给子组件绑定自定义事件,事件名:input
				子组件可以触发该自定义事件,用来修改父组件对应的状态数据
	$on,$emit,$once,$off
		给一个组件绑定自定义事件有两种方法
			静态绑定	@input
			动态绑定	vm.$on
	.sync修饰符
		实际源码与v-model几乎没有区别,所以在Vue3中,两个指令已经实现二合一
		1.将data中的某个响应式属性的值作为组件的标签属性传递下来,属性名是value
			<Helloworld  :value="form.name">
		2.给子组件绑定自定义事件,事件名:update:value
			子组件可以触发该自定义事件,用来修改父组件对应的状态数据
	事件总线
		1.给Vue原型对象注册属性$bus
			Vue.prototype.$bus = new Vue();
			注意:必须传入一个Vue对象,因为$on和$emit方法都存在与Vue的原型对象上,如果不是Vue的实例对象,无法使用该方法
		2.订阅方,订阅消息用来接收数据
			this.$bus.$on('test',回调函数)
		3.发布方,发布消息用来传递数据
			this.$bus.$emit('test',需要传递的数据)
		注意:在组件销毁之前记得解绑,因为虽然当前组件被卸载了,但是$bus还存在

4.获取对应组件实例对象
	$parent	->	用于获取父组件实例对象
	$root	->	用于获取组件树根组件实例,特指Root组件,不是App
	$children	->	用于获取所有子组件组成的数组
			注意:修改该数组中的顺序或者下标内容,不会影响到子组件渲染
	$refs	->	使用方式不同效果不同
			如果给html标签添加ref属性,找到的结果是真实DOM
			如果给组件添加ref属性,找到的结果是组件实例对象

5.$attrs和$listeners
	$attrs	->	用于收集当前组件没有接收的标签属性
	$listeners	->	用于收集当前组件身上所有的自定义事件

6.插槽
	默认插槽	
	具名插槽
	作用域插槽